extends ../layouts/basic-with-sidebar

block title
  h1 Project Setup

block sidebar
  include ../partials/docsidebar

block content
  h2 Dependencies
  p First install these packages:
  ul
    li MongoDB
    li NodeJS
    li NPM (with these packages)
      ul
        li Grunt
        li Duo

  h2 Set up project folder
  p The CTS project is split up into several different git repositories. Make a directory called `cts`. *Within that* we are going to check out all the necessary repositories.

  p From the CTS directory, run the following git commands:

  pre
    code.
      git clone https://github.com/cts/cts.git

      git clone https://github.com/cts/util.git

      git clone https://github.com/cts/model.git

      git clone https://github.com/cts/relations.git
      
      git clone https://github.com/cts/gsheet-adapter.git

      git clone https://github.com/cts/html-adapter.git

      git clone https://github.com/cts/json-adapter.git

      git clone https://github.com/cts/abstract-adapter.git

      git clone https://github.com/cts/engine.git

      git clone https://github.com/cts/parser.git

  h2 Load NPM dependences of CTS

  p From inside the `cts/cts` folder (the main repository), load the NPM dependencies
  pre
    code npm install

  h2 Link in the other CTS repos for live development.

  p Duo, the CTS dependency manager, is going to want to use the Github versions of the other packages (like `cts/model`) unless we use symlinks to trick it into using your development version. This way, you can make changes in any repository and immediately see the results without having to release a new version via Github.

  p First, change to the `cts/cts` directory and run `grunt` (Think of `grunt` as `make` for Javascript).

  p Next, change to the `tmp/components directory` directory. Type `ls` to see all the packages that the `cts/cts` project depends upon.

  p OK. Here is the not fun part, but you only have to do it once. Package for package, delete the folder in the `tmp/components` directory and create a symlink (using the same name as the one you just deleted) to the corresponding repository that you checked out in the parent `cts/` folder.

  p For example, for the `model` package, you might do:
  pre
    code.
      rm -rf cts-model@master
      ln -s ../../../model cts-model@master

  p Having done that, I can type `ls -l` to see that the link is set up correctly for the `cts/model` repository.

  pre
    code.
      TedsMBP:components eob$ ls -l
      (snip)
      cts-model@master -> ../../../model
      (snip)

  p Do the same for the other repositories.

  h2 Building the CTS Library
  p You're all set up to go now.
  
  p To build <code>cts.js</code>, just run <code>grunt</code> from the project root. Then look at the <code>release/</code> directory for output.

  h2 Setting up the CTS Server
  p Since CTS is a web library, it helps to have a development server running to load pre-packaged experiments and create your own.

  p First you'll need to create a <code>opts</code> file and a <code>secrets</code> file to contain machine-specific configuration. These are blocked by the project's <code>.gitignore</code> file so you won't accidentally check them in.

  p Run the following two commands from the project root:

  pre
    code.
      cp website/config/secrets_example.js website/config/secrets.js
      cp website/config/opts_example.js website/config/opts.js

  h2 Running the development server
  p To run the server, first make sure MongoDB is running (<code>sudo mongod</code> and then run:
  pre
    code grunt server
  p This causes a number of processes to run in parallel:
  ul
    li Runs a server on <a href="http://localhost:3000">localhost:3000</a>. This is the server hosting the website you are viewing now.
    li Runs a file server on <a href="http://localhost:3001">localhost:3001</a>. This helps you load the CTS files individually (instead of bundled) so that errors will report the proper source file and line number.
    li Watches and recompiles upon file change.
  p Alternatively, you could just run <code>node app.js</code> from the <code>website</code> directory to only run the server on port 3000.
